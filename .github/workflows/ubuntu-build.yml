# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: Ubuntu Build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  ubuntu-check-cpplint:
    uses: ./.github/workflows/callable-check-job.yml
    with:
      job-name: cpplint
      timeout: 60

  ubuntu-build:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    needs:
      - ubuntu-check-cpplint
    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false
      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      # see: http://docs.github.com/en/actions/how-tos/write-workflows/choose-what-workflows-do/run-job-variations#adding-a-matrix-strategy-to-your-workflow-job
      matrix:
        # The support os can see: https://docs.github.com/en/actions/reference/workflows-and-actions/workflow-syntax#choosing-github-hosted-runners
        os: [ ubuntu-22.04, ubuntu-24.04, ubuntu-22.04-arm, ubuntu-24.04-arm ]
        build_type: [ Release ]
        c_compiler: [ gcc ]
        cpp_compiler: [ g++ ]

    steps:
      - uses: actions/checkout@v4
        # Details see: https://github.com/actions/checkout
        with:
          submodules: true
      - name: Build Dependencies
        shell: bash
        run: |
          bash ${{ github.workspace }}/bin/build_deps.sh
      - name: Set Reusable Strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
          echo "gtest-build-output-dir=${{ github.workspace }}/build-gtest" >> "$GITHUB_OUTPUT"
      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -S ${{ github.workspace }}
          -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/install
          -DENABLE_GTEST=OFF
      - name: Build
        # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}
      - name: Install
        run: >
          cmake --build ${{ steps.strings.outputs.build-output-dir }}
          --config ${{ matrix.build_type }}
          --target install
      - name: Configure GTest CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: >
          cmake -B ${{ steps.strings.outputs.gtest-build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -S ${{ github.workspace }}
          -DBUILD_SHARED_LIBS=OFF
          -DENABLE_GTEST=ON
      - name: GTest Build
        # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        run: cmake --build ${{ steps.strings.outputs.gtest-build-output-dir }} --config ${{ matrix.build_type }}
      - name: GTest
        working-directory: ${{ steps.strings.outputs.gtest-build-output-dir }}
        # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        # optional args: --parallel 2
        run: ctest --verbose --output-on-failure --build-config ${{ matrix.build_type }}

  ubuntu-result:
    runs-on: ubuntu-24.04
    needs:
      - ubuntu-build
    steps:
      - name: Print results
        shell: bash
        run: |
          echo "Project build pass on ubuntu platform"
