# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: Code Coverage

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  ubuntu-check-build:
    uses: ./.github/workflows/callable-check-job.yml
    with:
      job-name: ubuntu-build
      timeout: 600

  macos-check-build:
    uses: ./.github/workflows/callable-check-job.yml
    with:
      job-name: macos-build
      timeout: 600

  windows-check-build:
    uses: ./.github/workflows/callable-check-job.yml
    with:
      job-name: windows-build
      timeout: 600

  codecov:
    runs-on: ubuntu-24.04
    needs:
      - ubuntu-check-build
      - macos-check-build
      - windows-check-build
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Set Reusable Strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=g++
          -DCMAKE_C_COMPILER=gcc
          -DCMAKE_BUILD_TYPE=Debug
          -S ${{ github.workspace }}
          -DENABLE_GTEST=ON
          -DENABLE_COVERAGE=ON
      - name: Build
        # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config Debug
      - name: GTest
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest --parallel 2 --verbose --output-on-failure --build-config Debug
      - name: Install GCovr
        shell: bash
        run: |
          sudo apt-get --assume-yes install gcovr
      - name: LCov Collection
        shell: bash
        run: |
          gcovr -r ${{ github.workspace }} --xml -o ${{ github.workspace }}/coverage.xml \
            -e '/usr/.*' -e '.*/tests/.*' -e '.*/thirdparty/.*' --print-summary
      # Optional: upload coverage report to codecov.io
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5.4.3
        with:
          files: ${{ github.workspace }}/coverage.xml
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true
          verbose: true
