name: Windows Build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  windows-check-cpplint:
    uses: ./.github/workflows/callable-check-job.yml
    with:
      job-name: cpplint
      timeout: 60

  windows-build:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30  #: see https://docs.github.com/en/actions/reference/workflows-and-actions/workflow-syntax#jobsjob_idtimeout-minutes
    needs:
      - windows-check-cpplint
    strategy:
      fail-fast: false
      matrix:
        # The support os can see: https://docs.github.com/en/actions/reference/workflows-and-actions/workflow-syntax#choosing-github-hosted-runners
        os: [ windows-2025, windows-11-arm ]
        build_type: [ Release ]
        c_compiler: [ cl]
        cpp_compiler: [ cl ]

    steps:
      - uses: actions/checkout@v4
        # Details see: https://github.com/actions/checkout
        with:
          submodules: true
      - name: Install Cygwin with required packages
        # Install essential tools/libs
        #   - autoconf used to build jemalloc
        run: |
          choco install cygwin -y --no-progress
          refreshenv
          $CYGWIN_ROOT = "C:\tools\cygwin"
          & "$CYGWIN_ROOT\cygwinsetup.exe" `
                --root "$CYGWIN_ROOT" `
                --site "http://mirrors.kernel.org/sourceware/cygwin/" `
                --packages autoconf,autogen,gawk,grep,sed `
                --quiet-mode `
                --no-desktop `
                --no-startmenu `
                --no-shortcuts
          echo "$CYGWIN_ROOT\bin" >> $GITHUB_PATH
      - name: Create arm64 lib soft link
        # cmake not find libs in */lib/*/arm64/* folders, create soft link to fix it
        if: matrix.os == 'windows-11-arm'
        run: |
          cmd /c mklink /D "C:/Program Files/OpenSSL/lib/VC/x64" "C:/Program Files/OpenSSL/lib/VC/arm64"
      - name: Build Dependencies
        run: |
          $env:PATH = "C:\tools\cygwin\bin;$env:PATH"
          $scriptPath = "${{ github.workspace }}/bin/build_deps.sh"
          if (Test-Path $scriptPath) {
            $content = Get-Content -Raw $scriptPath
            $content = $content -replace "`r`n", "`n"
            Set-Content -Path $scriptPath -Value $content -NoNewline
            Write-Host "Fixed line endings in build_deps.sh"
          }
          bash '${{ github.workspace }}/bin/build_deps.sh'
      - name: Set Reusable Strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}\build" >> "$GITHUB_OUTPUT"
          echo "gtest-build-output-dir=${{ github.workspace }}\build-gtest" >> "$GITHUB_OUTPUT"

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -S ${{ github.workspace }}
          -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}\install
          -DENABLE_GTEST=OFF
      - name: Build
        # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}
      - name: Install
        run: >
          cmake --build ${{ steps.strings.outputs.build-output-dir }}
          --config ${{ matrix.build_type }}
          --target install
      - name: Configure GTest CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: >
          cmake -B ${{ steps.strings.outputs.gtest-build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -S ${{ github.workspace }}
          -DBUILD_SHARED_LIBS=OFF
          -DENABLE_GTEST=ON
      - name: GTest Build
        # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        run: cmake --build ${{ steps.strings.outputs.gtest-build-output-dir }} --config ${{ matrix.build_type }}
      - name: GTest
        working-directory: ${{ steps.strings.outputs.gtest-build-output-dir }}
        # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        # optional args: --parallel 2
        run: ctest --verbose --output-on-failure --build-config ${{ matrix.build_type }}

  windows-result:
    runs-on: ubuntu-24.04
    needs:
      - windows-build
    steps:
      - name: Print results
        shell: bash
        run: |
          echo "Project build pass on windows platform"
