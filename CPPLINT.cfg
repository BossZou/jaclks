# cpplint 配置文件
# 基于 Google C++ Style Guide (https://google.github.io/styleguide/cppguide.html)

# 设置行长度限制（Google 默认 80，但可根据项目调整）
linelength=80

# 允许的文件扩展名（Google 风格推荐使用 .h 和 .cc，但 .cpp 也很常见）
extensions=hpp,h,cc,cpp,cxx

# 过滤某些检查项（根据项目需求调整）

# 允许子目录包含路径（如 `#include "subdir/header.h"`）
filter=-build/include_subdir

# jaclks uses `#pragma once`, not the `#ifndef FOO_H` guard.
# https://drake.mit.edu/styleguide/cppguide.html#The__pragma_once_Guard
filter=-build/header_guard
filter=+build/pragma_once

# TODO(#1805) Fix this.
filter=-legal/copyright

# 忽略空行警告
filter=-whitespace/blank_line
# -build/include_order,   # 不强制检查 include 顺序（可手动排序）
# -whitespace/line_length, # 如果放宽行长度限制，可以去掉此项
# -runtime/references,     # 允许非 const 引用参数（Google 风格不鼓励，但某些项目允许）
# -readability/todo,      # 允许 TODO 注释不带作者名
# -build/c++11            # 不强制 C++11 检查（如果项目使用 C++11+）

# 头文件保护宏格式（Google 风格推荐 `<PROJECT>_<PATH>_<FILE>_H_`）
# 但可以放宽要求，使用 `FILENAME_H` 格式
headers=hpp,h

# 禁止使用某些头文件（如 C 风格头文件）
# Google 推荐使用 <cstdio> 而非 <stdio.h>
# banned_h_files=stdio.h,stdlib.h,string.h

# 允许的 C++ 标准库头文件（可选）
# 如果项目限制某些 C++ 特性，可以在这里指定
# allowed_cpp_headers=algorithm,vector,string,memory,utility

# Ignore code that isn't ours.
exclude_files=thirdparty

# Ignore code in test files.
exclude_files=tests

# 设置项目名称（用于头文件保护宏）
# 例如，如果项目名是 `my_project`，则头文件保护宏应为 `MY_PROJECT_PATH_FILE_H_`
# 如果留空，则使用默认的 `FILENAME_H`
# project_name=my_project
